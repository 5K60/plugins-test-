# -*- coding: utf-8 -*-
# by digiteng...06.2020, 11.2020
from Components.AVSwitch import AVSwitch
from Screens.Screen import Screen
from Components.Pixmap import Pixmap
from Components.Label import Label
from Components.ActionMap import ActionMap
from enigma import eEPGCache, eTimer, getDesktop, ePixmap
from Components.config import config
from ServiceReference import ServiceReference
from Screens.MessageBox import MessageBox
import Tools.Notifications
import requests
from requests.utils import quote
import os, re, random, json
from PIL import Image
# import socket
import xtra
from datetime import datetime
import threading
from Components.ProgressBar import ProgressBar

if config.plugins.xtraEvent.tmdbAPI.value != "":
	tmdb_api = config.plugins.xtraEvent.tmdbAPI.value
else:
	tmdb_api = "3c3efcf47c3577558812bb9d64019d65"
if config.plugins.xtraEvent.tvdbAPI.value != "":
	tvdb_api = config.plugins.xtraEvent.tvdbAPI.value
else:
	tvdb_api = "a99d487bb3426e5f3a60dea6d3d3c7ef"
if config.plugins.xtraEvent.fanartAPI.value != "":
	fanart_api = config.plugins.xtraEvent.fanartAPI.value
else:
	fanart_api = "6d231536dea4318a88cb2520ce89473b"
if config.plugins.xtraEvent.omdbAPI.value != "":
	omdb_api = config.plugins.xtraEvent.omdbAPI.value
else:
	omdb_apis = ["6a4c9432", "a8834925", "550a7c40", "8ec53e6b"]
	omdb_api = random.choice(omdb_apis)
	
epgcache = eEPGCache.getInstance()
pathLoc = config.plugins.xtraEvent.loc.value + "xtraEvent/"
desktop_size = getDesktop(0).size().width()

class downloads(Screen):
	def __init__(self, session):
		Screen.__init__(self, session)
		self.session = session
		skin = None
		if desktop_size <= 1280:
			if config.plugins.xtraEvent.skinSelect.value == "default":
				skin = "/usr/lib/enigma2/python/Plugins/Extensions/xtraEvent/skins/downloads_720_default.xml"
			elif config.plugins.xtraEvent.skinSelect.value == "skin_2":
				skin = "/usr/lib/enigma2/python/Plugins/Extensions/xtraEvent/skins/downloads_720_2.xml"
			elif config.plugins.xtraEvent.skinSelect.value == "skin_3":
				skin = "/usr/lib/enigma2/python/Plugins/Extensions/xtraEvent/skins/downloads_720_3.xml"
		else:
			if config.plugins.xtraEvent.skinSelect.value == "default":
				skin = "/usr/lib/enigma2/python/Plugins/Extensions/xtraEvent/skins/downloads_1080_default.xml"
			elif config.plugins.xtraEvent.skinSelect.value == "skin_2":
				skin = "/usr/lib/enigma2/python/Plugins/Extensions/xtraEvent/skins/downloads_1080_2.xml"
			elif config.plugins.xtraEvent.skinSelect.value == "skin_3":
				skin = "/usr/lib/enigma2/python/Plugins/Extensions/xtraEvent/skins/downloads_1080_3.xml"
		with open(skin, 'r') as f:
			self.skin = f.read()
		self.titles = ""
		self['status'] = Label()
		self['info'] = Label()
		self['info2'] = Label()
		self['key_red'] = Label(_('Close'))
		self['key_green'] = Label(_('Download'))
		# self['key_yellow'] = Label(_('Download'))
		# self['key_blue'] = Label(_('Manuel Search'))
		self['actions'] = ActionMap(['SetupActions', 'ColorActions'], {'cancel': self.close, 'red': self.close, 'ok':self.save,'green':self.save}, -2)
		
		self['progress'] = ProgressBar()
		self['progress'].setRange((0, 100))
		self['progress'].setValue(0)

	def save(self):
		if config.plugins.xtraEvent.searchMOD.value == "Current Channel":
			self.currentChEpgs()
		if config.plugins.xtraEvent.searchMOD.value == "Bouquets":
			self.selBouquets()
			
	def currentChEpgs(self):
		events = None
		import NavigationInstance
		ref = NavigationInstance.instance.getCurrentlyPlayingServiceReference().toString()
		try:
			events = epgcache.lookupEvent(['IBDCTSERNX', (ref, 1, -1, -1)])
			if config.plugins.xtraEvent.searchNUMBER.value == "all epg":
				n = len(events)
				titles = []
				for i in range(int(n)):
					title = events[i][4]
					evntNm = re.sub("([\(\[]).*?([\)\]])|(: odc.\d+)|(\d+: odc.\d+)|(\d+ odc.\d+)|(:)|( -(.*?).*)|(,)|!", "", title).rstrip()
					titles.append(str(evntNm))
				self.titles = list(dict.fromkeys(titles))
				self.download()
			else:
				n = config.plugins.xtraEvent.searchNUMBER.value
				titles = []
				for i in range(int(n)):
					title = events[i][4]
					evntNm = re.sub("([\(\[]).*?([\)\]])|(: odc.\d+)|(\d+: odc.\d+)|(\d+ odc.\d+)|(:)|( -(.*?).*)|(,)|!", "", title).rstrip()
					titles.append(str(evntNm))
				self.titles = list(dict.fromkeys(titles))
				open("/tmp/evnts", "w").write(str(self.titles))
				self.download()
		except:
			pass

	def selBouquets(self):
		if os.path.exists(pathLoc + "bqts"):
			with open(pathLoc + "bqts", "r") as f:
				refs = f.readlines()
			nl = len(refs)
			eventlist=[]
			for i in range(nl):
				ref = refs[i]
				try:
					events = epgcache.lookupEvent(['IBDCTSERNX', (ref, 1, -1, -1)])
					n = config.plugins.xtraEvent.searchNUMBER.value
					
					for i in range(int(n)):
						title = events[i][4]
						evntNm = re.sub("([\(\[]).*?([\)\]])|(: odc.\d+)|(\d+: odc.\d+)|(\d+ odc.\d+)|(:)|( -(.*?).*)|(,)|!", "", title).rstrip()
						eventlist.append(evntNm)
					self.titles = eventlist
					open("/tmp/evntsssss", "a+").write("%s\n"% str(self.titles))
				except:
					pass
			open("/tmp/evnts", "w").write("%s"% str(self.titles))
			self.download()		
			
	def intCheck(self):
		try:
			socket.setdefaulttimeout(5)
			socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect(("8.8.8.8", 53))
			return True
		except:
			return False
			
	def download(self):
		threading.Thread(target=self.down).start()

	def down(self):
		self['progress'].setValue(0)
		now = datetime.now()
		dt = now.strftime("%d/%m/%Y %H:%M:%S")
		with open("/tmp/up_report", "a+") as f:
			f.write(str("\n\nstart : {}\n".format(dt)))

		title = ""
		n = len(self.titles)
		for i in range(n):
			title = self.titles[i]
			title = title.strip()
			if config.plugins.xtraEvent.poster.value == True:
				if config.plugins.xtraEvent.tmdb.value == True:
					threading.Thread(target=self.tmdb_poster(title)).start()
		self['info'].setText("end.................")
		
	def tmdb_poster(self, title):
		dwnldFile = pathLoc + "poster/{}.jpg".format(title)
		if not os.path.exists(dwnldFile):
			srch = "multi"
			lang = config.plugins.xtraEvent.searchLang.value
			url_tmdb = "https://api.themoviedb.org/3/search/{}?api_key={}&query={}&language={}".format(srch, tmdb_api, quote(title), lang)
			try:
				poster = ""
				poster = requests.get(url_tmdb).json()['results'][0]['poster_path']
				p_size = config.plugins.xtraEvent.TMDBpostersize.value
				url = "https://image.tmdb.org/t/p/{}{}".format(p_size, poster)
				if poster != "":
					open(dwnldFile, 'wb').write(requests.get(url, stream=True, allow_redirects=True).content)
					# tmdb_poster_downloaded += 1
					# downloaded = tmdb_poster_downloaded
					# self.prgrs(downloaded, n)
					# self['info'].setText(_("{} poster downloaded from TMDB...".format(title.upper())))
					# self.brokenImageRemove()
			except:
				pass
		















